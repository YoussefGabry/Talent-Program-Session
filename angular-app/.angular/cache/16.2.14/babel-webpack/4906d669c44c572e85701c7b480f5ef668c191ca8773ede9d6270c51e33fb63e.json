{"ast":null,"code":"'use strict';\n\n/**\n * @license Angular v15.1.0-next.0\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n(function (factory) {\n  typeof define === 'function' && define.amd ? define(factory) : factory();\n})(function () {\n  'use strict';\n\n  /**\n   * @license\n   * Copyright Google LLC All Rights Reserved.\n   *\n   * Use of this source code is governed by an MIT-style license that can be\n   * found in the LICENSE file at https://angular.io/license\n   */\n  /**\n   * @fileoverview\n   * @suppress {globalThis,undefinedVars}\n   */\n  Zone.__load_patch('Error', function (global, Zone, api) {\n    /*\n     * This code patches Error so that:\n     *   - It ignores un-needed stack frames.\n     *   - It Shows the associated Zone for reach frame.\n     */\n    var zoneJsInternalStackFramesSymbol = api.symbol('zoneJsInternalStackFrames');\n    var NativeError = global[api.symbol('Error')] = global['Error'];\n    // Store the frames which should be removed from the stack frames\n    var zoneJsInternalStackFrames = {};\n    // We must find the frame where Error was created, otherwise we assume we don't understand stack\n    var zoneAwareFrame1;\n    var zoneAwareFrame2;\n    var zoneAwareFrame1WithoutNew;\n    var zoneAwareFrame2WithoutNew;\n    var zoneAwareFrame3WithoutNew;\n    global['Error'] = ZoneAwareError;\n    var stackRewrite = 'stackRewrite';\n    var zoneJsInternalStackFramesPolicy = global['__Zone_Error_BlacklistedStackFrames_policy'] || global['__Zone_Error_ZoneJsInternalStackFrames_policy'] || 'default';\n    function buildZoneFrameNames(zoneFrame) {\n      var zoneFrameName = {\n        zoneName: zoneFrame.zone.name\n      };\n      var result = zoneFrameName;\n      while (zoneFrame.parent) {\n        zoneFrame = zoneFrame.parent;\n        var parentZoneFrameName = {\n          zoneName: zoneFrame.zone.name\n        };\n        zoneFrameName.parent = parentZoneFrameName;\n        zoneFrameName = parentZoneFrameName;\n      }\n      return result;\n    }\n    function buildZoneAwareStackFrames(originalStack, zoneFrame, isZoneFrame) {\n      if (isZoneFrame === void 0) {\n        isZoneFrame = true;\n      }\n      var frames = originalStack.split('\\n');\n      var i = 0;\n      // Find the first frame\n      while (!(frames[i] === zoneAwareFrame1 || frames[i] === zoneAwareFrame2 || frames[i] === zoneAwareFrame1WithoutNew || frames[i] === zoneAwareFrame2WithoutNew || frames[i] === zoneAwareFrame3WithoutNew) && i < frames.length) {\n        i++;\n      }\n      for (; i < frames.length && zoneFrame; i++) {\n        var frame = frames[i];\n        if (frame.trim()) {\n          switch (zoneJsInternalStackFrames[frame]) {\n            case 0 /* FrameType.zoneJsInternal */:\n              frames.splice(i, 1);\n              i--;\n              break;\n            case 1 /* FrameType.transition */:\n              if (zoneFrame.parent) {\n                // This is the special frame where zone changed. Print and process it accordingly\n                zoneFrame = zoneFrame.parent;\n              } else {\n                zoneFrame = null;\n              }\n              frames.splice(i, 1);\n              i--;\n              break;\n            default:\n              frames[i] += isZoneFrame ? \" [\".concat(zoneFrame.zone.name, \"]\") : \" [\".concat(zoneFrame.zoneName, \"]\");\n          }\n        }\n      }\n      return frames.join('\\n');\n    }\n    /**\n     * This is ZoneAwareError which processes the stack frame and cleans up extra frames as well as\n     * adds zone information to it.\n     */\n    function ZoneAwareError() {\n      var _this = this;\n      // We always have to return native error otherwise the browser console will not work.\n      var error = NativeError.apply(this, arguments);\n      // Save original stack trace\n      var originalStack = error['originalStack'] = error.stack;\n      // Process the stack trace and rewrite the frames.\n      if (ZoneAwareError[stackRewrite] && originalStack) {\n        var zoneFrame = api.currentZoneFrame();\n        if (zoneJsInternalStackFramesPolicy === 'lazy') {\n          // don't handle stack trace now\n          error[api.symbol('zoneFrameNames')] = buildZoneFrameNames(zoneFrame);\n        } else if (zoneJsInternalStackFramesPolicy === 'default') {\n          try {\n            error.stack = error.zoneAwareStack = buildZoneAwareStackFrames(originalStack, zoneFrame);\n          } catch (e) {\n            // ignore as some browsers don't allow overriding of stack\n          }\n        }\n      }\n      if (this instanceof NativeError && this.constructor != NativeError) {\n        // We got called with a `new` operator AND we are subclass of ZoneAwareError\n        // in that case we have to copy all of our properties to `this`.\n        Object.keys(error).concat('stack', 'message').forEach(function (key) {\n          var value = error[key];\n          if (value !== undefined) {\n            try {\n              _this[key] = value;\n            } catch (e) {\n              // ignore the assignment in case it is a setter and it throws.\n            }\n          }\n        });\n        return this;\n      }\n      return error;\n    }\n    // Copy the prototype so that instanceof operator works as expected\n    ZoneAwareError.prototype = NativeError.prototype;\n    ZoneAwareError[zoneJsInternalStackFramesSymbol] = zoneJsInternalStackFrames;\n    ZoneAwareError[stackRewrite] = false;\n    var zoneAwareStackSymbol = api.symbol('zoneAwareStack');\n    // try to define zoneAwareStack property when zoneJsInternal frames policy is delay\n    if (zoneJsInternalStackFramesPolicy === 'lazy') {\n      Object.defineProperty(ZoneAwareError.prototype, 'zoneAwareStack', {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n          if (!this[zoneAwareStackSymbol]) {\n            this[zoneAwareStackSymbol] = buildZoneAwareStackFrames(this.originalStack, this[api.symbol('zoneFrameNames')], false);\n          }\n          return this[zoneAwareStackSymbol];\n        },\n        set: function (newStack) {\n          this.originalStack = newStack;\n          this[zoneAwareStackSymbol] = buildZoneAwareStackFrames(this.originalStack, this[api.symbol('zoneFrameNames')], false);\n        }\n      });\n    }\n    // those properties need special handling\n    var specialPropertyNames = ['stackTraceLimit', 'captureStackTrace', 'prepareStackTrace'];\n    // those properties of NativeError should be set to ZoneAwareError\n    var nativeErrorProperties = Object.keys(NativeError);\n    if (nativeErrorProperties) {\n      nativeErrorProperties.forEach(function (prop) {\n        if (specialPropertyNames.filter(function (sp) {\n          return sp === prop;\n        }).length === 0) {\n          Object.defineProperty(ZoneAwareError, prop, {\n            get: function () {\n              return NativeError[prop];\n            },\n            set: function (value) {\n              NativeError[prop] = value;\n            }\n          });\n        }\n      });\n    }\n    if (NativeError.hasOwnProperty('stackTraceLimit')) {\n      // Extend default stack limit as we will be removing few frames.\n      NativeError.stackTraceLimit = Math.max(NativeError.stackTraceLimit, 15);\n      // make sure that ZoneAwareError has the same property which forwards to NativeError.\n      Object.defineProperty(ZoneAwareError, 'stackTraceLimit', {\n        get: function () {\n          return NativeError.stackTraceLimit;\n        },\n        set: function (value) {\n          return NativeError.stackTraceLimit = value;\n        }\n      });\n    }\n    if (NativeError.hasOwnProperty('captureStackTrace')) {\n      Object.defineProperty(ZoneAwareError, 'captureStackTrace', {\n        // add named function here because we need to remove this\n        // stack frame when prepareStackTrace below\n        value: function zoneCaptureStackTrace(targetObject, constructorOpt) {\n          NativeError.captureStackTrace(targetObject, constructorOpt);\n        }\n      });\n    }\n    var ZONE_CAPTURESTACKTRACE = 'zoneCaptureStackTrace';\n    Object.defineProperty(ZoneAwareError, 'prepareStackTrace', {\n      get: function () {\n        return NativeError.prepareStackTrace;\n      },\n      set: function (value) {\n        if (!value || typeof value !== 'function') {\n          return NativeError.prepareStackTrace = value;\n        }\n        return NativeError.prepareStackTrace = function (error, structuredStackTrace) {\n          // remove additional stack information from ZoneAwareError.captureStackTrace\n          if (structuredStackTrace) {\n            for (var i = 0; i < structuredStackTrace.length; i++) {\n              var st = structuredStackTrace[i];\n              // remove the first function which name is zoneCaptureStackTrace\n              if (st.getFunctionName() === ZONE_CAPTURESTACKTRACE) {\n                structuredStackTrace.splice(i, 1);\n                break;\n              }\n            }\n          }\n          return value.call(this, error, structuredStackTrace);\n        };\n      }\n    });\n    if (zoneJsInternalStackFramesPolicy === 'disable') {\n      // don't need to run detectZone to populate zoneJs internal stack frames\n      return;\n    }\n    // Now we need to populate the `zoneJsInternalStackFrames` as well as find the\n    // run/runGuarded/runTask frames. This is done by creating a detect zone and then threading\n    // the execution through all of the above methods so that we can look at the stack trace and\n    // find the frames of interest.\n    var detectZone = Zone.current.fork({\n      name: 'detect',\n      onHandleError: function (parentZD, current, target, error) {\n        if (error.originalStack && Error === ZoneAwareError) {\n          var frames_1 = error.originalStack.split(/\\n/);\n          var runFrame = false,\n            runGuardedFrame = false,\n            runTaskFrame = false;\n          while (frames_1.length) {\n            var frame = frames_1.shift();\n            // On safari it is possible to have stack frame with no line number.\n            // This check makes sure that we don't filter frames on name only (must have\n            // line number or exact equals to `ZoneAwareError`)\n            if (/:\\d+:\\d+/.test(frame) || frame === 'ZoneAwareError') {\n              // Get rid of the path so that we don't accidentally find function name in path.\n              // In chrome the separator is `(` and `@` in FF and safari\n              // Chrome: at Zone.run (zone.js:100)\n              // Chrome: at Zone.run (http://localhost:9876/base/build/lib/zone.js:100:24)\n              // FireFox: Zone.prototype.run@http://localhost:9876/base/build/lib/zone.js:101:24\n              // Safari: run@http://localhost:9876/base/build/lib/zone.js:101:24\n              var fnName = frame.split('(')[0].split('@')[0];\n              var frameType = 1 /* FrameType.transition */;\n              if (fnName.indexOf('ZoneAwareError') !== -1) {\n                if (fnName.indexOf('new ZoneAwareError') !== -1) {\n                  zoneAwareFrame1 = frame;\n                  zoneAwareFrame2 = frame.replace('new ZoneAwareError', 'new Error.ZoneAwareError');\n                } else {\n                  zoneAwareFrame1WithoutNew = frame;\n                  zoneAwareFrame2WithoutNew = frame.replace('Error.', '');\n                  if (frame.indexOf('Error.ZoneAwareError') === -1) {\n                    zoneAwareFrame3WithoutNew = frame.replace('ZoneAwareError', 'Error.ZoneAwareError');\n                  }\n                }\n                zoneJsInternalStackFrames[zoneAwareFrame2] = 0 /* FrameType.zoneJsInternal */;\n              }\n\n              if (fnName.indexOf('runGuarded') !== -1) {\n                runGuardedFrame = true;\n              } else if (fnName.indexOf('runTask') !== -1) {\n                runTaskFrame = true;\n              } else if (fnName.indexOf('run') !== -1) {\n                runFrame = true;\n              } else {\n                frameType = 0 /* FrameType.zoneJsInternal */;\n              }\n\n              zoneJsInternalStackFrames[frame] = frameType;\n              // Once we find all of the frames we can stop looking.\n              if (runFrame && runGuardedFrame && runTaskFrame) {\n                ZoneAwareError[stackRewrite] = true;\n                break;\n              }\n            }\n          }\n        }\n        return false;\n      }\n    });\n    // carefully constructor a stack frame which contains all of the frames of interest which\n    // need to be detected and marked as an internal zoneJs frame.\n    var childDetectZone = detectZone.fork({\n      name: 'child',\n      onScheduleTask: function (delegate, curr, target, task) {\n        return delegate.scheduleTask(target, task);\n      },\n      onInvokeTask: function (delegate, curr, target, task, applyThis, applyArgs) {\n        return delegate.invokeTask(target, task, applyThis, applyArgs);\n      },\n      onCancelTask: function (delegate, curr, target, task) {\n        return delegate.cancelTask(target, task);\n      },\n      onInvoke: function (delegate, curr, target, callback, applyThis, applyArgs, source) {\n        return delegate.invoke(target, callback, applyThis, applyArgs, source);\n      }\n    });\n    // we need to detect all zone related frames, it will\n    // exceed default stackTraceLimit, so we set it to\n    // larger number here, and restore it after detect finish.\n    // We cast through any so we don't need to depend on nodejs typings.\n    var originalStackTraceLimit = Error.stackTraceLimit;\n    Error.stackTraceLimit = 100;\n    // we schedule event/micro/macro task, and invoke them\n    // when onSchedule, so we can get all stack traces for\n    // all kinds of tasks with one error thrown.\n    childDetectZone.run(function () {\n      childDetectZone.runGuarded(function () {\n        var fakeTransitionTo = function () {};\n        childDetectZone.scheduleEventTask(zoneJsInternalStackFramesSymbol, function () {\n          childDetectZone.scheduleMacroTask(zoneJsInternalStackFramesSymbol, function () {\n            childDetectZone.scheduleMicroTask(zoneJsInternalStackFramesSymbol, function () {\n              throw new Error();\n            }, undefined, function (t) {\n              t._transitionTo = fakeTransitionTo;\n              t.invoke();\n            });\n            childDetectZone.scheduleMicroTask(zoneJsInternalStackFramesSymbol, function () {\n              throw Error();\n            }, undefined, function (t) {\n              t._transitionTo = fakeTransitionTo;\n              t.invoke();\n            });\n          }, undefined, function (t) {\n            t._transitionTo = fakeTransitionTo;\n            t.invoke();\n          }, function () {});\n        }, undefined, function (t) {\n          t._transitionTo = fakeTransitionTo;\n          t.invoke();\n        }, function () {});\n      });\n    });\n    Error.stackTraceLimit = originalStackTraceLimit;\n  });\n});","map":{"version":3,"names":["factory","define","amd","Zone","__load_patch","global","api","zoneJsInternalStackFramesSymbol","symbol","NativeError","zoneJsInternalStackFrames","zoneAwareFrame1","zoneAwareFrame2","zoneAwareFrame1WithoutNew","zoneAwareFrame2WithoutNew","zoneAwareFrame3WithoutNew","ZoneAwareError","stackRewrite","zoneJsInternalStackFramesPolicy","buildZoneFrameNames","zoneFrame","zoneFrameName","zoneName","zone","name","result","parent","parentZoneFrameName","buildZoneAwareStackFrames","originalStack","isZoneFrame","frames","split","i","length","frame","trim","splice","concat","join","_this","error","apply","arguments","stack","currentZoneFrame","zoneAwareStack","e","constructor","Object","keys","forEach","key","value","undefined","prototype","zoneAwareStackSymbol","defineProperty","configurable","enumerable","get","set","newStack","specialPropertyNames","nativeErrorProperties","prop","filter","sp","hasOwnProperty","stackTraceLimit","Math","max","zoneCaptureStackTrace","targetObject","constructorOpt","captureStackTrace","ZONE_CAPTURESTACKTRACE","prepareStackTrace","structuredStackTrace","st","getFunctionName","call","detectZone","current","fork","onHandleError","parentZD","target","Error","frames_1","runFrame","runGuardedFrame","runTaskFrame","shift","test","fnName","frameType","indexOf","replace","childDetectZone","onScheduleTask","delegate","curr","task","scheduleTask","onInvokeTask","applyThis","applyArgs","invokeTask","onCancelTask","cancelTask","onInvoke","callback","source","invoke","originalStackTraceLimit","run","runGuarded","fakeTransitionTo","scheduleEventTask","scheduleMacroTask","scheduleMicroTask","t","_transitionTo"],"sources":["D:/Verina/SPA session/angular-app/node_modules/zone.js/dist/zone-error.js"],"sourcesContent":["'use strict';\n/**\n * @license Angular v15.1.0-next.0\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n(function (factory) {\n    typeof define === 'function' && define.amd ? define(factory) :\n        factory();\n})((function () {\n    'use strict';\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @fileoverview\n     * @suppress {globalThis,undefinedVars}\n     */\n    Zone.__load_patch('Error', function (global, Zone, api) {\n        /*\n         * This code patches Error so that:\n         *   - It ignores un-needed stack frames.\n         *   - It Shows the associated Zone for reach frame.\n         */\n        var zoneJsInternalStackFramesSymbol = api.symbol('zoneJsInternalStackFrames');\n        var NativeError = global[api.symbol('Error')] = global['Error'];\n        // Store the frames which should be removed from the stack frames\n        var zoneJsInternalStackFrames = {};\n        // We must find the frame where Error was created, otherwise we assume we don't understand stack\n        var zoneAwareFrame1;\n        var zoneAwareFrame2;\n        var zoneAwareFrame1WithoutNew;\n        var zoneAwareFrame2WithoutNew;\n        var zoneAwareFrame3WithoutNew;\n        global['Error'] = ZoneAwareError;\n        var stackRewrite = 'stackRewrite';\n        var zoneJsInternalStackFramesPolicy = global['__Zone_Error_BlacklistedStackFrames_policy'] ||\n            global['__Zone_Error_ZoneJsInternalStackFrames_policy'] || 'default';\n        function buildZoneFrameNames(zoneFrame) {\n            var zoneFrameName = { zoneName: zoneFrame.zone.name };\n            var result = zoneFrameName;\n            while (zoneFrame.parent) {\n                zoneFrame = zoneFrame.parent;\n                var parentZoneFrameName = { zoneName: zoneFrame.zone.name };\n                zoneFrameName.parent = parentZoneFrameName;\n                zoneFrameName = parentZoneFrameName;\n            }\n            return result;\n        }\n        function buildZoneAwareStackFrames(originalStack, zoneFrame, isZoneFrame) {\n            if (isZoneFrame === void 0) { isZoneFrame = true; }\n            var frames = originalStack.split('\\n');\n            var i = 0;\n            // Find the first frame\n            while (!(frames[i] === zoneAwareFrame1 || frames[i] === zoneAwareFrame2 ||\n                frames[i] === zoneAwareFrame1WithoutNew || frames[i] === zoneAwareFrame2WithoutNew ||\n                frames[i] === zoneAwareFrame3WithoutNew) &&\n                i < frames.length) {\n                i++;\n            }\n            for (; i < frames.length && zoneFrame; i++) {\n                var frame = frames[i];\n                if (frame.trim()) {\n                    switch (zoneJsInternalStackFrames[frame]) {\n                        case 0 /* FrameType.zoneJsInternal */:\n                            frames.splice(i, 1);\n                            i--;\n                            break;\n                        case 1 /* FrameType.transition */:\n                            if (zoneFrame.parent) {\n                                // This is the special frame where zone changed. Print and process it accordingly\n                                zoneFrame = zoneFrame.parent;\n                            }\n                            else {\n                                zoneFrame = null;\n                            }\n                            frames.splice(i, 1);\n                            i--;\n                            break;\n                        default:\n                            frames[i] += isZoneFrame ? \" [\".concat(zoneFrame.zone.name, \"]\") :\n                                \" [\".concat(zoneFrame.zoneName, \"]\");\n                    }\n                }\n            }\n            return frames.join('\\n');\n        }\n        /**\n         * This is ZoneAwareError which processes the stack frame and cleans up extra frames as well as\n         * adds zone information to it.\n         */\n        function ZoneAwareError() {\n            var _this = this;\n            // We always have to return native error otherwise the browser console will not work.\n            var error = NativeError.apply(this, arguments);\n            // Save original stack trace\n            var originalStack = error['originalStack'] = error.stack;\n            // Process the stack trace and rewrite the frames.\n            if (ZoneAwareError[stackRewrite] && originalStack) {\n                var zoneFrame = api.currentZoneFrame();\n                if (zoneJsInternalStackFramesPolicy === 'lazy') {\n                    // don't handle stack trace now\n                    error[api.symbol('zoneFrameNames')] = buildZoneFrameNames(zoneFrame);\n                }\n                else if (zoneJsInternalStackFramesPolicy === 'default') {\n                    try {\n                        error.stack = error.zoneAwareStack = buildZoneAwareStackFrames(originalStack, zoneFrame);\n                    }\n                    catch (e) {\n                        // ignore as some browsers don't allow overriding of stack\n                    }\n                }\n            }\n            if (this instanceof NativeError && this.constructor != NativeError) {\n                // We got called with a `new` operator AND we are subclass of ZoneAwareError\n                // in that case we have to copy all of our properties to `this`.\n                Object.keys(error).concat('stack', 'message').forEach(function (key) {\n                    var value = error[key];\n                    if (value !== undefined) {\n                        try {\n                            _this[key] = value;\n                        }\n                        catch (e) {\n                            // ignore the assignment in case it is a setter and it throws.\n                        }\n                    }\n                });\n                return this;\n            }\n            return error;\n        }\n        // Copy the prototype so that instanceof operator works as expected\n        ZoneAwareError.prototype = NativeError.prototype;\n        ZoneAwareError[zoneJsInternalStackFramesSymbol] = zoneJsInternalStackFrames;\n        ZoneAwareError[stackRewrite] = false;\n        var zoneAwareStackSymbol = api.symbol('zoneAwareStack');\n        // try to define zoneAwareStack property when zoneJsInternal frames policy is delay\n        if (zoneJsInternalStackFramesPolicy === 'lazy') {\n            Object.defineProperty(ZoneAwareError.prototype, 'zoneAwareStack', {\n                configurable: true,\n                enumerable: true,\n                get: function () {\n                    if (!this[zoneAwareStackSymbol]) {\n                        this[zoneAwareStackSymbol] = buildZoneAwareStackFrames(this.originalStack, this[api.symbol('zoneFrameNames')], false);\n                    }\n                    return this[zoneAwareStackSymbol];\n                },\n                set: function (newStack) {\n                    this.originalStack = newStack;\n                    this[zoneAwareStackSymbol] = buildZoneAwareStackFrames(this.originalStack, this[api.symbol('zoneFrameNames')], false);\n                }\n            });\n        }\n        // those properties need special handling\n        var specialPropertyNames = ['stackTraceLimit', 'captureStackTrace', 'prepareStackTrace'];\n        // those properties of NativeError should be set to ZoneAwareError\n        var nativeErrorProperties = Object.keys(NativeError);\n        if (nativeErrorProperties) {\n            nativeErrorProperties.forEach(function (prop) {\n                if (specialPropertyNames.filter(function (sp) { return sp === prop; }).length === 0) {\n                    Object.defineProperty(ZoneAwareError, prop, {\n                        get: function () {\n                            return NativeError[prop];\n                        },\n                        set: function (value) {\n                            NativeError[prop] = value;\n                        }\n                    });\n                }\n            });\n        }\n        if (NativeError.hasOwnProperty('stackTraceLimit')) {\n            // Extend default stack limit as we will be removing few frames.\n            NativeError.stackTraceLimit = Math.max(NativeError.stackTraceLimit, 15);\n            // make sure that ZoneAwareError has the same property which forwards to NativeError.\n            Object.defineProperty(ZoneAwareError, 'stackTraceLimit', {\n                get: function () {\n                    return NativeError.stackTraceLimit;\n                },\n                set: function (value) {\n                    return NativeError.stackTraceLimit = value;\n                }\n            });\n        }\n        if (NativeError.hasOwnProperty('captureStackTrace')) {\n            Object.defineProperty(ZoneAwareError, 'captureStackTrace', {\n                // add named function here because we need to remove this\n                // stack frame when prepareStackTrace below\n                value: function zoneCaptureStackTrace(targetObject, constructorOpt) {\n                    NativeError.captureStackTrace(targetObject, constructorOpt);\n                }\n            });\n        }\n        var ZONE_CAPTURESTACKTRACE = 'zoneCaptureStackTrace';\n        Object.defineProperty(ZoneAwareError, 'prepareStackTrace', {\n            get: function () {\n                return NativeError.prepareStackTrace;\n            },\n            set: function (value) {\n                if (!value || typeof value !== 'function') {\n                    return NativeError.prepareStackTrace = value;\n                }\n                return NativeError.prepareStackTrace = function (error, structuredStackTrace) {\n                    // remove additional stack information from ZoneAwareError.captureStackTrace\n                    if (structuredStackTrace) {\n                        for (var i = 0; i < structuredStackTrace.length; i++) {\n                            var st = structuredStackTrace[i];\n                            // remove the first function which name is zoneCaptureStackTrace\n                            if (st.getFunctionName() === ZONE_CAPTURESTACKTRACE) {\n                                structuredStackTrace.splice(i, 1);\n                                break;\n                            }\n                        }\n                    }\n                    return value.call(this, error, structuredStackTrace);\n                };\n            }\n        });\n        if (zoneJsInternalStackFramesPolicy === 'disable') {\n            // don't need to run detectZone to populate zoneJs internal stack frames\n            return;\n        }\n        // Now we need to populate the `zoneJsInternalStackFrames` as well as find the\n        // run/runGuarded/runTask frames. This is done by creating a detect zone and then threading\n        // the execution through all of the above methods so that we can look at the stack trace and\n        // find the frames of interest.\n        var detectZone = Zone.current.fork({\n            name: 'detect',\n            onHandleError: function (parentZD, current, target, error) {\n                if (error.originalStack && Error === ZoneAwareError) {\n                    var frames_1 = error.originalStack.split(/\\n/);\n                    var runFrame = false, runGuardedFrame = false, runTaskFrame = false;\n                    while (frames_1.length) {\n                        var frame = frames_1.shift();\n                        // On safari it is possible to have stack frame with no line number.\n                        // This check makes sure that we don't filter frames on name only (must have\n                        // line number or exact equals to `ZoneAwareError`)\n                        if (/:\\d+:\\d+/.test(frame) || frame === 'ZoneAwareError') {\n                            // Get rid of the path so that we don't accidentally find function name in path.\n                            // In chrome the separator is `(` and `@` in FF and safari\n                            // Chrome: at Zone.run (zone.js:100)\n                            // Chrome: at Zone.run (http://localhost:9876/base/build/lib/zone.js:100:24)\n                            // FireFox: Zone.prototype.run@http://localhost:9876/base/build/lib/zone.js:101:24\n                            // Safari: run@http://localhost:9876/base/build/lib/zone.js:101:24\n                            var fnName = frame.split('(')[0].split('@')[0];\n                            var frameType = 1 /* FrameType.transition */;\n                            if (fnName.indexOf('ZoneAwareError') !== -1) {\n                                if (fnName.indexOf('new ZoneAwareError') !== -1) {\n                                    zoneAwareFrame1 = frame;\n                                    zoneAwareFrame2 = frame.replace('new ZoneAwareError', 'new Error.ZoneAwareError');\n                                }\n                                else {\n                                    zoneAwareFrame1WithoutNew = frame;\n                                    zoneAwareFrame2WithoutNew = frame.replace('Error.', '');\n                                    if (frame.indexOf('Error.ZoneAwareError') === -1) {\n                                        zoneAwareFrame3WithoutNew =\n                                            frame.replace('ZoneAwareError', 'Error.ZoneAwareError');\n                                    }\n                                }\n                                zoneJsInternalStackFrames[zoneAwareFrame2] = 0 /* FrameType.zoneJsInternal */;\n                            }\n                            if (fnName.indexOf('runGuarded') !== -1) {\n                                runGuardedFrame = true;\n                            }\n                            else if (fnName.indexOf('runTask') !== -1) {\n                                runTaskFrame = true;\n                            }\n                            else if (fnName.indexOf('run') !== -1) {\n                                runFrame = true;\n                            }\n                            else {\n                                frameType = 0 /* FrameType.zoneJsInternal */;\n                            }\n                            zoneJsInternalStackFrames[frame] = frameType;\n                            // Once we find all of the frames we can stop looking.\n                            if (runFrame && runGuardedFrame && runTaskFrame) {\n                                ZoneAwareError[stackRewrite] = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n                return false;\n            }\n        });\n        // carefully constructor a stack frame which contains all of the frames of interest which\n        // need to be detected and marked as an internal zoneJs frame.\n        var childDetectZone = detectZone.fork({\n            name: 'child',\n            onScheduleTask: function (delegate, curr, target, task) {\n                return delegate.scheduleTask(target, task);\n            },\n            onInvokeTask: function (delegate, curr, target, task, applyThis, applyArgs) {\n                return delegate.invokeTask(target, task, applyThis, applyArgs);\n            },\n            onCancelTask: function (delegate, curr, target, task) {\n                return delegate.cancelTask(target, task);\n            },\n            onInvoke: function (delegate, curr, target, callback, applyThis, applyArgs, source) {\n                return delegate.invoke(target, callback, applyThis, applyArgs, source);\n            }\n        });\n        // we need to detect all zone related frames, it will\n        // exceed default stackTraceLimit, so we set it to\n        // larger number here, and restore it after detect finish.\n        // We cast through any so we don't need to depend on nodejs typings.\n        var originalStackTraceLimit = Error.stackTraceLimit;\n        Error.stackTraceLimit = 100;\n        // we schedule event/micro/macro task, and invoke them\n        // when onSchedule, so we can get all stack traces for\n        // all kinds of tasks with one error thrown.\n        childDetectZone.run(function () {\n            childDetectZone.runGuarded(function () {\n                var fakeTransitionTo = function () { };\n                childDetectZone.scheduleEventTask(zoneJsInternalStackFramesSymbol, function () {\n                    childDetectZone.scheduleMacroTask(zoneJsInternalStackFramesSymbol, function () {\n                        childDetectZone.scheduleMicroTask(zoneJsInternalStackFramesSymbol, function () {\n                            throw new Error();\n                        }, undefined, function (t) {\n                            t._transitionTo = fakeTransitionTo;\n                            t.invoke();\n                        });\n                        childDetectZone.scheduleMicroTask(zoneJsInternalStackFramesSymbol, function () {\n                            throw Error();\n                        }, undefined, function (t) {\n                            t._transitionTo = fakeTransitionTo;\n                            t.invoke();\n                        });\n                    }, undefined, function (t) {\n                        t._transitionTo = fakeTransitionTo;\n                        t.invoke();\n                    }, function () { });\n                }, undefined, function (t) {\n                    t._transitionTo = fakeTransitionTo;\n                    t.invoke();\n                }, function () { });\n            });\n        });\n        Error.stackTraceLimit = originalStackTraceLimit;\n    });\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}